/* Generated by re2c 3.1 on Fri Jan 12 15:40:25 2024 */

use std::str;

use super::ast::Node;

pub(crate) struct LexOne {
    pub(crate) consume: usize,
    pub(crate) node: Option<Node>,
}

pub(crate) fn lex_one(s: &[u8]) -> Option<LexOne> {
    let mut cursor = 0;

    {
        #[allow(unused_assignments)]
        let mut yych: u8 = 0;
        let mut yystate: usize = 0;
        'yyl: loop {
            match yystate {
                0 => {
                    yych = unsafe { *s.get_unchecked(cursor) };
                    cursor += 1;
                    match yych {
                        0x09..=0x0A | 0x0D | 0x20 => {
                            yystate = 2;
                            continue 'yyl;
                        }
                        0x2A | 0x2D | 0x41..=0x5A | 0x5F | 0x61..=0x7A => {
                            yystate = 4;
                            continue 'yyl;
                        }
                        _ => {
                            yystate = 1;
                            continue 'yyl;
                        }
                    }
                }
                1 => {
                    return None;
                }
                2 => {
                    yych = unsafe { *s.get_unchecked(cursor) };
                    match yych {
                        0x09..=0x0A | 0x0D | 0x20 => {
                            cursor += 1;
                            yystate = 2;
                            continue 'yyl;
                        }
                        _ => {
                            yystate = 3;
                            continue 'yyl;
                        }
                    }
                }
                3 => {
                    return Some(LexOne {
                        consume: cursor,
                        node: None,
                    });
                }
                4 => {
                    yych = unsafe { *s.get_unchecked(cursor) };
                    match yych {
                        0x2A | 0x2D | 0x30..=0x39 | 0x41..=0x5A | 0x5F | 0x61..=0x7A => {
                            cursor += 1;
                            yystate = 4;
                            continue 'yyl;
                        }
                        _ => {
                            yystate = 5;
                            continue 'yyl;
                        }
                    }
                }
                5 => {
                    return Some(LexOne {
                        consume: cursor,
                        node: Some(Node::Symbol(
                            str::from_utf8(&s[..cursor]).unwrap().to_string(),
                        )),
                    });
                }
                _ => {
                    panic!("internal lexer error")
                }
            }
        }
    }
}
